generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  phone           String?
  password        String?
  role            String           @default("user")
  tickets         Ticket[]         @relation("UserTickets")
  assignedTickets Ticket[]         @relation("EngineerTickets")
  contactRequests ContactRequest[]
  createdAt       DateTime         @default(now())
  Payment         Payment[]
  inProgressPayments InProgressPayment[]
}

model Ticket {
  id          String    @id @default(uuid())
  description String
  status      String    @default("pending")
  createdAt   DateTime  @default(now())
  service     String
  userId      String
  user        User      @relation("UserTickets", fields: [userId], references: [id])
  engineerId  String? // nullable, not required at creation
  engineer    User?     @relation("EngineerTickets", fields: [engineerId], references: [id])
  Payment     Payment[]
  inProgressPayments InProgressPayment[]
}

model Service {
  id   String @id @default(uuid())
  name String @unique
}

model ContactRequest {
  id           String   @id @default(uuid())
  name         String
  email        String
  phone        String
  computerType String
  description  String
  urgency      String
  createdAt    DateTime @default(now())
  userId       String?
  user         User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  paymentId String?
  status    String
  method    String?
  amount    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String?
  ticket    Ticket?  @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}

model InProgressPayment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  paymentId String?
  status    String
  method    String?
  amount    Int
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())
}